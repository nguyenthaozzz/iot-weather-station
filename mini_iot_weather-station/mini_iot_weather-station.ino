#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085_U.h>
#include <HTTPClient.h>         
#include <WiFiClientSecure.h> 
//--------------- Thư viện màn hình TFT -----------
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>
//--------------- Thư viện thời gian --------------
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <SimpleTimer.h>

//----------- Khai báo chân kết nối màn hình TFT ---------------

#define TFT_CS    5     // GPIO5  → CS
#define TFT_RST   6     // GPIO6  → RESET
#define TFT_DC    7     // GPIO7  → DC
#define TFT_MOSI  8     // GPIO8  → MOSI
#define TFT_SCLK  9     // GPIO9  → SCK

// Khởi tạo màn hình TFT ST7735
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

//------------Dinh nghia mau sac----------------
#define BLACK 0x0000    
#define BLUE 0x001F    
#define RED 0xF800      
#define GREEN 0x07E0
#define CYAN 0x07FF
#define MAGENTA 0xF81F  
#define YELLOW 0xFFE0
#define WHITE 0xFFFF 
//-------------Bitmap Logo ICON hien thi LCD-------------------------------------------
// 'logo_ute', 50x50px
const uint16_t logo_ute [] PROGMEM = {
	0xfffc, 0xfffe, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xffff, 
	0xf7bf, 0xe75e, 0xcefc, 0xc6db, 0xadb7, 0xbd97, 0xc536, 0xcd57, 0xb597, 0xa596, 0xae18, 0xadf8, 0xa597, 0xb5f9, 0xce5b, 0xd69c, 
	0xef1d, 0xffbf, 0xffff, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffff, 0xffff, 0xffbf, 0xffdf, 0xffff, 0xffff, 0xffff, 
	0xffff, 0xffff, 0xfffe, 0xfffe, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xffdf, 0xffff, 0xffdf, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffdf, 0xce5a, 0xbdd8, 0xc63a, 0xc6bb, 0xd73c, 0xe75d, 0xffdf, 0xff9f, 0xf69b, 0xff7f, 0xffff, 0xefff, 0xefff, 0xf7ff, 0xef5f, 
	0xdedd, 0xdebd, 0xce3a, 0xc5f9, 0xdedc, 0xffdf, 0xffdf, 0xf79f, 0xffdf, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7be, 
	0xef9e, 0xd69a, 0xbdf8, 0xd69b, 0xf79f, 0xffff, 0xf7ff, 0xf7ff, 0xffff, 0xffdf, 0xff5e, 0xccd4, 0xfe1a, 0xff7f, 0xf7df, 0xe7df, 
	0xffff, 0xffff, 0xffdf, 0xffdf, 0xf79f, 0xef7f, 0xc639, 0xb576, 0xdebb, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xfffe, 0xfffe, 0xffff, 0xf7be, 
	0xf7be, 0xdf1c, 0xbe18, 0xce7a, 0xef9f, 0xf7bf, 0xffbf, 0xf7bf, 0xf7ff, 0xf7ff, 0xffff, 0xffbf, 0xff9e, 0xf557, 0xcb0f, 0xfdd9, 
	0xffdf, 0xf7ff, 0xffff, 0xffff, 0xffbf, 0xffbf, 0xffff, 0xffdf, 0xffff, 0xffdf, 0xce59, 0xc617, 0xe71c, 0xf7be, 0xffff, 0xffff, 
	0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 
	0xfffe, 0xef7d, 0xc659, 0xc659, 0xef7e, 0xffff, 0xf7df, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7ff, 0xffff, 0xff9d, 0xff1c, 0xf4b4, 
	0xc189, 0xf3b1, 0xff3c, 0xfffe, 0xffdf, 0xffff, 0xffbf, 0xffdf, 0xffdf, 0xffff, 0xffdf, 0xffff, 0xffff, 0xef9d, 0xc657, 0xc637, 
	0xef7c, 0xffde, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfffe, 0xfffe, 0xfffe, 
	0xfffe, 0xfffe, 0xef7d, 0xc639, 0xd6bb, 0xffff, 0xffff, 0xf7df, 0xf7df, 0xffdf, 0xffdf, 0xffff, 0xffff, 0xf7de, 0xfffe, 0xff7d, 
	0xfd76, 0xd2cd, 0xd1a9, 0xc9ea, 0xecb3, 0xfefb, 0xffde, 0xffff, 0xffdf, 0xffdf, 0xffff, 0xffdf, 0xffff, 0xffff, 0xef9d, 0xffff, 
	0xfffe, 0xd6da, 0xc638, 0xdf1c, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfffe, 
	0xfffe, 0xfffe, 0xf7dd, 0xdf3c, 0xadb7, 0xe73e, 0xffff, 0xf7df, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffde, 
	0xffdd, 0xfeda, 0xd34e, 0xc188, 0xf2ee, 0xe2ad, 0xd2cd, 0xfdb7, 0xffde, 0xffff, 0xffff, 0xff7e, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffff, 0xf7de, 0xefbe, 0xffff, 0xce9b, 0xce9b, 0xdefd, 0xf7bf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 
	0xffff, 0xffff, 0xffff, 0xffff, 0xdf1d, 0xbdf9, 0xef7f, 0xf7bf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 
	0xffff, 0xfffe, 0xff9d, 0xf617, 0xc22a, 0xd1c9, 0xfc73, 0xfc52, 0xc168, 0xebb0, 0xff3c, 0xf7bd, 0xffff, 0xffbf, 0xffff, 0xffff, 
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7bf, 0xffff, 0xd6be, 0xbdfb, 0xdefe, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffff, 0xffdf, 0xffff, 0xffff, 0xf7bf, 0xf7bf, 0xa558, 0xd6bf, 0xd6df, 0xdf1f, 0xce9f, 0xdedf, 0xf7bf, 0xf7df, 0xffff, 0xffff, 
	0xffff, 0xffff, 0xff9e, 0xfffe, 0xffbd, 0xe554, 0xe30e, 0xc9a9, 0xfe18, 0xdb4e, 0xd189, 0xc9ca, 0xfe99, 0xfffe, 0xfffe, 0xffff, 
	0xffff, 0xffff, 0xffde, 0xffff, 0xffff, 0xf7df, 0xdf1e, 0xdeff, 0xd6bf, 0xdeff, 0xd69f, 0xb57a, 0xef5f, 0xffdf, 0xffff, 0xffff, 
	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7bf, 0xf7bf, 0xbdfc, 0xb59c, 0x6333, 0x4230, 0x52b1, 0x52b0, 0x9496, 0xef7f, 0xffff, 
	0xfffe, 0xfffe, 0xffff, 0xffff, 0xffdf, 0xffde, 0xff7c, 0xed35, 0xdaee, 0xca4b, 0xcc10, 0xb2ec, 0xc128, 0xb948, 0xe596, 0xffdd, 
	0xfffe, 0xffff, 0xfffe, 0xffff, 0xfffe, 0xffdf, 0xffff, 0xdf1d, 0x8c75, 0x528f, 0x5270, 0x52b2, 0x5ab2, 0xbdbd, 0xbdfc, 0xf79f, 
	0xffff, 0xffff, 0xffff, 0xffff, 0xfffe, 0xffff, 0xffdf, 0xffff, 0xbdfd, 0xc5fe, 0x6334, 0x296e, 0x39cf, 0x39ae, 0x8436, 0xef5f, 
	0xffff, 0xffff, 0xfffe, 0xffdd, 0xffde, 0xffff, 0xffff, 0xffde, 0xff5d, 0xe515, 0xb26b, 0xa20a, 0xccb2, 0xc410, 0xb9ca, 0xc20b, 
	0xedb7, 0xfffe, 0xffff, 0xffff, 0xffff, 0xf75c, 0xfffe, 0xffff, 0xffdf, 0xffff, 0xef5f, 0x7bf5, 0x318e, 0x318f, 0x41f0, 0x6b54, 
	0xc61d, 0xbdfa, 0xffff, 0xf7be, 0xffff, 0xffff, 0xfffe, 0xf7be, 0xffff, 0xce7d, 0xbdde, 0x8c59, 0x316f, 0x39b0, 0x316e, 0x8437, 
	0xdebf, 0xffdf, 0xffff, 0xef5c, 0xff9c, 0xfffe, 0xffff, 0xffff, 0xffff, 0xffbe, 0xffbf, 0xfe5a, 0xc3b0, 0xbb6f, 0xf69a, 0xe5d7, 
	0xcb4f, 0xec54, 0xfedc, 0xffdf, 0xffbe, 0xffbe, 0xffde, 0xffde, 0xfffe, 0xf77d, 0xffdf, 0xffff, 0xffff, 0xdedf, 0x7bb6, 0x39f0, 
	0x318f, 0x39af, 0x8416, 0xc63d, 0xdedd, 0xffff, 0xffff, 0xffff, 0xfffe, 0xffff, 0xef7f, 0xbddc, 0xb57e, 0x39b0, 0x39b0, 0x39b0, 
	0x6b54, 0xdedf, 0xffdf, 0xffbf, 0xffff, 0xffff, 0xfffe, 0xfffe, 0xffbd, 0xf77d, 0xff5d, 0xf6fc, 0xff7e, 0xff3e, 0xedd9, 0xf61a, 
	0xf6fc, 0xee7a, 0xd4f5, 0xfe5b, 0xff3d, 0xff1c, 0xeefb, 0xf75d, 0xff3d, 0xff9e, 0xffde, 0xffde, 0xfffe, 0xffff, 0xffdf, 0xffdf, 
	0xdebf, 0x4a51, 0x296e, 0x41f0, 0x39ce, 0xc61d, 0xb599, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xbe1b, 0xce7f, 0x62f4, 0x3190, 
	0x39b0, 0x41f0, 0xce5f, 0xf79f, 0xffff, 0xffff, 0xffde, 0xff9d, 0xff5d, 0xde79, 0xd658, 0xde79, 0xee7a, 0xe639, 0xde7a, 0xdebb, 
	0xde1a, 0xddf9, 0xeedc, 0xd65a, 0xc597, 0xe67b, 0xe67a, 0xee9b, 0xe67a, 0xe69a, 0xee9b, 0xd5f9, 0xe699, 0xf73b, 0xffdd, 0xfffe, 
	0xffff, 0xffff, 0xffdf, 0xb5bd, 0x4a51, 0x318e, 0x39ef, 0x7374, 0xc5fc, 0xd69d, 0xffff, 0xffff, 0xffff, 0xe75e, 0xbe1c, 0xa51a, 
	0x318f, 0x39d1, 0x39f1, 0x8c58, 0xef5f, 0xffff, 0xffbe, 0xfffd, 0xfffe, 0xe6b9, 0xd618, 0xf73d, 0xffbe, 0xffdf, 0xff9f, 0xff9f, 
	0xf7ff, 0xf7ff, 0xf75f, 0xd5fa, 0xde7c, 0xbdf9, 0xcefc, 0xf7ff, 0xffbf, 0xffdf, 0xffbf, 0xff9f, 0xff7f, 0xffbf, 0xeedb, 0xde98, 
	0xef3a, 0xffbc, 0xf79c, 0xffff, 0xef7f, 0xffdf, 0x73b6, 0x318e, 0x316d, 0x39ce, 0xad5b, 0xbdfb, 0xf79f, 0xffff, 0xffdf, 0xdebd, 
	0xb5bc, 0x6b95, 0x216e, 0x31b0, 0x4a51, 0xe71f, 0xffff, 0xffff, 0xfffe, 0xfffd, 0xe678, 0xde17, 0xff5d, 0xffdf, 0xfffe, 0xfffe, 
	0xff7e, 0xff9f, 0xefff, 0xefff, 0xef9f, 0xad38, 0x62b0, 0x5af0, 0xb63b, 0xefff, 0xf7ff, 0xffbf, 0xff9f, 0xff9f, 0xffbf, 0xffdf, 
	0xffdf, 0xff7c, 0xd5f5, 0xff5a, 0xfffe, 0xf7fe, 0xffff, 0xef7f, 0xdf1f, 0x52d2, 0x212c, 0x31cf, 0x7376, 0xb57c, 0xe6fe, 0xf79e, 
	0xff9f, 0xc59a, 0xb5bd, 0x3231, 0x21cf, 0x218e, 0xa51a, 0xf77f, 0xf7df, 0xffff, 0xffff, 0xff9c, 0xd554, 0xd513, 0xff9d, 0xffde, 
	0xfffe, 0xffdd, 0xffbe, 0xffdf, 0xceff, 0x9dbc, 0x9d7a, 0x52d1, 0x312f, 0x41d1, 0x73b4, 0xbe3b, 0x9d58, 0xef5f, 0xffdf, 0xffde, 
	0xfffe, 0xffff, 0xffff, 0xff3d, 0xe555, 0xedd7, 0xfffe, 0xeffe, 0xf7ff, 0xffff, 0xf7df, 0x8cb6, 0x198d, 0x218f, 0x4233, 0xc5df, 
	0xb5ba, 0xffdf, 0xf67d, 0xcddc, 0x8c9a, 0x21d0, 0x19cf, 0x42d2, 0xdebf, 0xffbf, 0xffdf, 0xffff, 0xffbe, 0xeeb9, 0xe554, 0xfe17, 
	0xfe78, 0xffbe, 0xffbe, 0xfffe, 0xfffe, 0xffff, 0xc69f, 0x3a71, 0x42b0, 0x4a91, 0x4192, 0x3931, 0x5ab1, 0x3a2c, 0x5b72, 0xf7df, 
	0xf77f, 0xffff, 0xf7fe, 0xf7fe, 0xffff, 0xf67b, 0xfd57, 0xe4d4, 0xf71b, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xce9c, 0x42d1, 0x21d0, 
	0x31b2, 0x945b, 0xbdfc, 0xf79f, 0xeebf, 0xd63e, 0x5af4, 0x21b0, 0x21ef, 0x6394, 0xf75f, 0xff9f, 0xffbf, 0xff5e, 0xffbe, 0xff9d, 
	0xe513, 0xe513, 0xf5f7, 0xff1c, 0xff9e, 0xffff, 0xf7be, 0xf7ff, 0xadfd, 0x322f, 0xbe3d, 0xad7b, 0x3970, 0x5212, 0xce5e, 0x7c34, 
	0x5311, 0xe75f, 0xffdf, 0xffbf, 0xfffe, 0xfffe, 0xff3d, 0xedb9, 0xfd56, 0xfd96, 0xfeba, 0xffde, 0xff9e, 0xffbf, 0xffdf, 0xf77f, 
	0x5b33, 0x298f, 0x31b2, 0x6336, 0xc63d, 0xdf1e, 0xd65d, 0xbdbc, 0x318f, 0x2990, 0x3251, 0x9d3a, 0xffbf, 0xff9f, 0xff7f, 0xff5e, 
	0xfe9a, 0xfe38, 0xfefb, 0xe4d2, 0xed56, 0xff3d, 0xffbf, 0xffff, 0xffff, 0xd6fd, 0x7c56, 0x73f6, 0xf7ff, 0x9cb8, 0x398f, 0x41d0, 
	0xdeff, 0xd6ff, 0x5b52, 0xa57b, 0xffdf, 0xffdf, 0xf7be, 0xffdf, 0xff1e, 0xfdb9, 0xe473, 0xfe18, 0xfe39, 0xfefb, 0xff7e, 0xff7e, 
	0xff7e, 0xffbf, 0xa4fa, 0x39f1, 0x2970, 0x31b0, 0xc61d, 0xce5c, 0xad9b, 0xa55b, 0x31d0, 0x296f, 0x3a51, 0xd6bf, 0xff7f, 0xfe9c, 
	0xfdd8, 0xf4d4, 0xb32c, 0xb34c, 0xfe79, 0xfd55, 0xe4d4, 0xfdf9, 0xff7f, 0xff7f, 0xf7df, 0x7432, 0x320d, 0x9d3a, 0xf7df, 0xb5bb, 
	0x41f0, 0x4a52, 0xdf1f, 0xf7ff, 0x4a8f, 0x426e, 0xad79, 0xffff, 0xffdf, 0xffbf, 0xfdda, 0xf4f7, 0xfd35, 0xfe38, 0xc3ae, 0xaacb, 
	0xd431, 0xfe39, 0xff5e, 0xff7f, 0xde3f, 0x41f0, 0x31d1, 0x3a11, 0xad9b, 0xb5b9, 0xa5bc, 0x8c99, 0x3a11, 0x3190, 0x52b2, 0xe6bf, 
	0xdd57, 0xe473, 0xcaec, 0xdb4d, 0xfcb2, 0xf4d2, 0xfd13, 0xfdd7, 0xdc93, 0xe537, 0xff1e, 0xffbf, 0xffff, 0xc69b, 0x6393, 0x8457, 
	0xf7bf, 0xb5bc, 0x31d0, 0x3a10, 0xdf5f, 0xdf5f, 0x5b11, 0xa519, 0xdefe, 0xffff, 0xffdf, 0xff7f, 0xf538, 0xdbf3, 0xfdf8, 0xfd54, 
	0xe3cf, 0xfcd3, 0xdbaf, 0xcb2d, 0xc36e, 0xe4f6, 0xfeff, 0x41d0, 0x190e, 0x31f0, 0x94b8, 0xad79, 0xa59c, 0x6395, 0x2990, 0x3190, 
	0x6b54, 0xee9f, 0xcc33, 0xdbcf, 0xfcb2, 0xfbae, 0xcaca, 0xb228, 0xdbae, 0xfebb, 0xf536, 0xdcf5, 0xfe9b, 0xffbf, 0xf7be, 0xf7ff, 
	0x9d5a, 0x4ab1, 0xdeff, 0xbdfe, 0x31f1, 0x4ad4, 0xe7df, 0x9d79, 0x4a6e, 0xde9e, 0xffff, 0xffdf, 0xff9e, 0xf63a, 0xecb6, 0xfcf6, 
	0xfe7a, 0xec50, 0xcacb, 0xd2ab, 0xf3ae, 0xfc92, 0xfc52, 0xcbb2, 0xe61e, 0x6b55, 0x4a73, 0x216e, 0x8416, 0xad59, 0xa57c, 0x6bb6, 
	0x31f1, 0x214f, 0x7375, 0xff1f, 0xe494, 0xe36e, 0xda8a, 0xd248, 0xfc50, 0xfc91, 0xe38e, 0xfd35, 0xfe3a, 0xc452, 0xed76, 0xff3c, 
	0xfffe, 0xefbf, 0xce9e, 0x4a4f, 0x6312, 0x9479, 0x29d0, 0x4293, 0x8d19, 0x426d, 0x7392, 0xf75f, 0xffdf, 0xffde, 0xffbe, 0xdd56, 
	0xe4b6, 0xfe1a, 0xfd14, 0xe3ee, 0xfc50, 0xfbcf, 0xdaaa, 0xd26a, 0xe2ed, 0xfcb6, 0xfedf, 0x5ad3, 0x2990, 0x31af, 0x73d4, 0xb579, 
	0xad7d, 0x6b76, 0x2190, 0x29b0, 0x7354, 0xfe9f, 0xcb70, 0xf3af, 0xfcb2, 0xfbce, 0xd288, 0xc227, 0xe2eb, 0xfcf4, 0xff3e, 0xd4d4, 
	0xc451, 0xff3c, 0xffbd, 0xf79e, 0xce7d, 0x7bb4, 0x8394, 0x5250, 0x318e, 0x31ef, 0x4ad0, 0x8c95, 0x83f3, 0xff9f, 0xf79e, 0xfffe, 
	0xff3c, 0xccb3, 0xe4f6, 0xff3e, 0xfcf3, 0xcb0a, 0xc1e7, 0xdaaa, 0xfbce, 0xfc72, 0xfb8f, 0xd350, 0xee9f, 0x5b34, 0x31d1, 0x31af, 
	0x7394, 0xad58, 0xa51b, 0x6335, 0x29d1, 0x218f, 0x7bb5, 0xff7f, 0xfcf6, 0xeb2d, 0xc9e7, 0xda48, 0xf36c, 0xfc50, 0xfb6d, 0xe32d, 
	0xfdd8, 0xff1c, 0xbbcf, 0xedb6, 0xffde, 0xffdf, 0xffdf, 0xff5f, 0xff7f, 0xbd1a, 0x41ce, 0x6b33, 0xd69e, 0xffbf, 0xf75f, 0xffdf, 
	0xffdf, 0xffde, 0xf618, 0xcc51, 0xfdb8, 0xfd97, 0xdbae, 0xfc0e, 0xfc2f, 0xfb6d, 0xe2aa, 0xc9a7, 0xf2ed, 0xfcf6, 0xff7f, 0x6375, 
	0x3a11, 0x296e, 0x73b4, 0xad58, 0xb53c, 0x7396, 0x2a11, 0x218f, 0x6b54, 0xedfd, 0xc2ee, 0xe2cc, 0xfc10, 0xfc30, 0xf34c, 0xd207, 
	0xd1a7, 0xf34d, 0xfd96, 0xfedb, 0xecf4, 0xc410, 0xff3c, 0xff9e, 0xff9f, 0xff5f, 0xff9f, 0xfebe, 0x59ec, 0x8b92, 0xff9f, 0xffdf, 
	0xffdf, 0xffdf, 0xffff, 0xfefc, 0xdd14, 0xdc72, 0xff1d, 0xfdd7, 0xe38d, 0xca27, 0xd227, 0xeaeb, 0xfbef, 0xfc71, 0xf30d, 0xba8d, 
	0xeedf, 0x5b54, 0x18ed, 0x39af, 0x7bd5, 0xad58, 0xc59d, 0x7375, 0x29f1, 0x29f1, 0x5ad2, 0xff3f, 0xfd99, 0xfbf1, 0xda6a, 0xc9c6, 
	0xd207, 0xfb6d, 0xfbaf, 0xfaec, 0xc2cb, 0xfd76, 0xfe19, 0xbb6f, 0xf5b7, 0xfedb, 0xee7a, 0xcd76, 0xd597, 0xd598, 0xcd57, 0xc557, 
	0xde5a, 0xd619, 0xd63a, 0xf71d, 0xff7e, 0xfedb, 0xc34d, 0xfd76, 0xfdf8, 0xb26a, 0xe2eb, 0xfc30, 0xfb8d, 0xe249, 0xd1c7, 0xe24a, 
	0xfbf0, 0xfdb9, 0xeeff, 0x42b1, 0x4212, 0x41d0, 0x8c56, 0xad79, 0xb53b, 0x9cba, 0x31f0, 0x21af, 0x4ab1, 0xee7e, 0xd413, 0xc22a, 
	0xfb4e, 0xfbd0, 0xfb8e, 0xfa8a, 0xe186, 0xe1e8, 0xe2cc, 0xfdf8, 0xfebc, 0xf432, 0xcbd0, 0xe535, 0xf659, 0xff5d, 0xff9e, 0xff7e, 
	0xffbf, 0xff7e, 0xff5e, 0xff5d, 0xe69a, 0xe619, 0xccd4, 0xc3b0, 0xf3f0, 0xfe7a, 0xfdf8, 0xeb4e, 0xe208, 0xd185, 0xe228, 0xfb8e, 
	0xfbd0, 0xfb6f, 0xba09, 0xd453, 0xde9f, 0x4271, 0x296f, 0x294e, 0x9cd8, 0xb5d9, 0xce1d, 0xa4da, 0x31d0, 0x31f0, 0x29ce, 0xd61d, 
	0xfede, 0xfc53, 0xeaac, 0xd9a8, 0xd105, 0xd945, 0xfa49, 0xfacc, 0xe229, 0xe2ab, 0xfb8f, 0xfcb4, 0xfdb7, 0xff3d, 0xff9d, 0xffbd, 
	0xffbe, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xff9e, 0xffbe, 0xff9e, 0xfedc, 0xfd15, 0xfc31, 0xfbaf, 0xda2a, 0xea6b, 0xfa49, 0xfa49, 
	0xea08, 0xc905, 0xd126, 0xfb0e, 0xec31, 0xfedd, 0xce1d, 0x31cf, 0x3190, 0x4a31, 0xb59b, 0xc63b, 0xc5fc, 0xce3f, 0x5293, 0x214e, 
	0x29ef, 0xa4f9, 0xfdda, 0xb20b, 0xc968, 0xd106, 0xe167, 0xe966, 0xf145, 0xe0e4, 0xd105, 0xd967, 0xd925, 0xd9a7, 0xe2ab, 0xfcd3, 
	0xff3b, 0xfffe, 0xf7ff, 0xf7ff, 0xefbe, 0xffff, 0xffff, 0xff9d, 0xffbd, 0xfeda, 0xfd35, 0xe2ab, 0xd9a7, 0xd925, 0xc8c5, 0xe127, 
	0xe0e4, 0xe925, 0xe9a7, 0xe167, 0xe988, 0xb906, 0xa24a, 0xedf9, 0x9c77, 0x39cf, 0x3170, 0x4211, 0xc63d, 0xce7c, 0xe6ff, 0xc61e, 
	0x5ad4, 0x39f1, 0x29af, 0x62f2, 0xfeff, 0xfd58, 0xf3b1, 0xda6b, 0xd1c8, 0xc125, 0xd125, 0xd925, 0xe166, 0xd0c4, 0xe104, 0xd0e3, 
	0xc966, 0xb9e7, 0xdcb2, 0xff3b, 0xf7ff, 0xefff, 0xf7ff, 0xf7df, 0xffdf, 0xffde, 0xff1b, 0xe450, 0xca08, 0xc925, 0xd0e4, 0xe105, 
	0xe126, 0xd8e5, 0xe145, 0xd965, 0xb924, 0xc187, 0xd1ea, 0xf3d1, 0xfe19, 0xeebc, 0x62d1, 0x31af, 0x39b1, 0x7376, 0xd69e, 0xd6bc, 
	0xe77f, 0xb5db, 0x9cfb, 0x31f1, 0x214f, 0x4a32, 0xd5de, 0xff3f, 0xff7f, 0xfedb, 0xfdb6, 0xe450, 0xc289, 0xc1c7, 0xd187, 0xc904, 
	0xd124, 0xd103, 0xd145, 0xc986, 0xba08, 0xfe38, 0xfffe, 0xf7fe, 0xffff, 0xffde, 0xfffe, 0xffbd, 0xfe37, 0xba48, 0xc986, 0xd125, 
	0xd8c4, 0xe905, 0xd904, 0xd144, 0xca05, 0xc2a8, 0xdc70, 0xfdf7, 0xfebc, 0xff3e, 0xffbf, 0xc5db, 0x31ed, 0x298e, 0x39b2, 0xad1d, 
	0xbdba, 0xf79e, 0xf7df, 0xc63c, 0xb5fd, 0x4251, 0x2990, 0x39f1, 0x7bb6, 0xffbf, 0xffbf, 0xffdf, 0xffbd, 0xff9c, 0xfefb, 0xfd75, 
	0xfb6f, 0xe9e9, 0xe986, 0xe124, 0xe125, 0xd105, 0xc987, 0xfdb7, 0xffbd, 0xfffe, 0xffff, 0xffdf, 0xffff, 0xff9d, 0xfdd7, 0xc9e8, 
	0xd125, 0xe0e5, 0xe0c5, 0xf147, 0xfa08, 0xfb4c, 0xfd73, 0xff19, 0xff7b, 0xffbd, 0xffbf, 0xffdf, 0xffbf, 0x6b93, 0x29ce, 0x3a31, 
	0x41f1, 0xce3f, 0xce5b, 0xf7be, 0xffdf, 0xdedd, 0xc65d, 0x6b93, 0x3a0f, 0x298d, 0x3a0f, 0xce7e, 0xf7df, 0xffff, 0xffdd, 0xffbd, 
	0xff5c, 0xfcd4, 0xf2ad, 0xf9ea, 0xf927, 0xf8e6, 0xe8e6, 0xd0e6, 0xc968, 0xfd98, 0xff9f, 0xffff, 0xffff, 0xffff, 0xffff, 0xff7e, 
	0xfd98, 0xd189, 0xe0c6, 0xf0c6, 0xf107, 0xf188, 0xf1ea, 0xeaab, 0xfd34, 0xff7c, 0xffdd, 0xffff, 0xffbf, 0xffdf, 0xbdde, 0x31af, 
	0x3a51, 0x216d, 0x8417, 0xc5dc, 0xe71d, 0xffff, 0xff9f, 0xffdf, 0xb599, 0xbe1b, 0x3a2d, 0x320e, 0x29ad, 0x6bd5, 0xdf9f, 0xf7ff, 
	0xffff, 0xffbd, 0xfefa, 0xdb2d, 0xc107, 0xe908, 0xf8a6, 0xf8a5, 0xe8c6, 0xd906, 0xc9ca, 0xfdd9, 0xff9e, 0xffff, 0xf7ff, 0xffff, 
	0xffff, 0xff7e, 0xfdd9, 0xd9a9, 0xe0c6, 0xf0c6, 0xe8c6, 0xe907, 0xd927, 0xb906, 0xd34e, 0xfedb, 0xff7d, 0xffff, 0xffdf, 0xe71f, 
	0x6b56, 0x31b1, 0x29d0, 0x3a0f, 0xc61d, 0xb599, 0xf7bf, 0xffff, 0xffdf, 0xffdf, 0xd69b, 0xc65b, 0x8455, 0x29cc, 0x320f, 0x29ef, 
	0x957c, 0xdf9f, 0xf7ff, 0xffde, 0xfeda, 0xd2cb, 0xd0e5, 0xe8a5, 0xf883, 0xf8a3, 0xe0e4, 0xc945, 0xca49, 0xfe39, 0xff9d, 0xffff, 
	0xf7ff, 0xf7ff, 0xffff, 0xffbd, 0xfe58, 0xd228, 0xd904, 0xf0e4, 0xf0c5, 0xe8a5, 0xe0c6, 0xc106, 0xd30d, 0xfedb, 0xff7e, 0xffdf, 
	0xffbf, 0x9cbb, 0x39f2, 0x31f2, 0x10ed, 0x94fa, 0xc63b, 0xe6fc, 0xffff, 0xffff, 0xffdf, 0xffbf, 0xffff, 0xb5d8, 0xc65c, 0x3a4f, 
	0x29b0, 0x2190, 0x3a94, 0xadfe, 0xf7df, 0xff9f, 0xfdf7, 0xca07, 0xe105, 0xf0a4, 0xf8a3, 0xf0e3, 0xd903, 0xc145, 0xcaaa, 0xfe99, 
	0xffbd, 0xfffe, 0xffff, 0xffff, 0xfffe, 0xffdd, 0xfed9, 0xd2a9, 0xd124, 0xe8e3, 0xf8a3, 0xf8c4, 0xe8e5, 0xd125, 0xc24a, 0xfe5a, 
	0xff9f, 0xff9f, 0xbd9e, 0x5253, 0x2971, 0x2170, 0x42b2, 0xbe3d, 0xbe1a, 0xffdf, 0xffff, 0xffff, 0xffdf, 0xffff, 0xf79e, 0xef5e, 
	0xbddb, 0x9cfa, 0x39d2, 0x31d3, 0x2151, 0x6b98, 0xce3f, 0xff7f, 0xfe19, 0xc9c7, 0xe904, 0xf8a2, 0xf0c3, 0xe904, 0xd104, 0xc166, 
	0xcb0c, 0xfefb, 0xffbe, 0xffff, 0xffff, 0xffff, 0xf7fe, 0xffde, 0xff5b, 0xcb2b, 0xd145, 0xe8c3, 0xf062, 0xf8a2, 0xf0c2, 0xd924, 
	0xb9c7, 0xfdf9, 0xff7f, 0xde1f, 0x5a74, 0x3150, 0x2990, 0x3a51, 0x9d9b, 0xadfb, 0xdf1d, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffff, 0xffdf, 0xce5d, 0xce3f, 0x83d9, 0x3151, 0x3192, 0x2930, 0x62d3, 0xddbc, 0xfdda, 0xc1a7, 0xe124, 0xe8c2, 0xe8a3, 0xe905, 
	0xd8e5, 0xc987, 0xd36e, 0xff5d, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffdf, 0xfffe, 0xff9d, 0xd38d, 0xd166, 0xe8c4, 0xf8a3, 0xf8e3, 
	0xe8c2, 0xd965, 0xba08, 0xfdda, 0xe5dd, 0x5a51, 0x312f, 0x3990, 0x31d0, 0x7c57, 0xb65c, 0xc6bc, 0xf7df, 0xffff, 0xffff, 0xffff, 
	0xffff, 0xffff, 0xffff, 0xffdf, 0xef3f, 0xd65f, 0xacfb, 0x83b8, 0x3170, 0x39b1, 0x3990, 0x6231, 0xc416, 0xc2ae, 0xc126, 0xd925, 
	0xe905, 0xe0c5, 0xe0e6, 0xd188, 0xe431, 0xff7d, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xffdf, 0xffde, 0xff9d, 0xec71, 0xd947, 0xf0a5, 
	0xe8e4, 0xe104, 0xd105, 0xc9a8, 0xc2ef, 0xb373, 0x7292, 0x394e, 0x3970, 0x39b0, 0x6b94, 0xcedf, 0xb63a, 0xe77e, 0xffff, 0xff9f, 
	0xffff, 0xffff, 0xf7fe, 0xf7ff, 0xffff, 0xffff, 0xffdf, 0xff9f, 0xde7e, 0xbd7b, 0x6b34, 0x296e, 0x296f, 0x41b0, 0x61ef, 0xbb95, 
	0xf435, 0xc1aa, 0xd127, 0xd0a5, 0xd8c6, 0xc988, 0xfd96, 0xff9d, 0xffff, 0xffff, 0xffbf, 0xff9f, 0xffdf, 0xffdf, 0xff9d, 0xfd96, 
	0xd167, 0xe0e6, 0xc906, 0xc188, 0xc9eb, 0xd2f1, 0xb353, 0x69ef, 0x310d, 0x41f1, 0x318f, 0x6b75, 0xd6df, 0x9d37, 0xf7ff, 0xffff, 
	0xffbf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7ff, 0xffff, 0xffff, 0xffbf, 0xe6fc, 0xce39, 0xc63b, 0x6bd4, 0x29ef, 0x29d0, 
	0x296f, 0x414f, 0x7a71, 0xc3b5, 0xd30f, 0xd26b, 0xd1ca, 0xb188, 0xfe59, 0xff7c, 0xf7de, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xffdf, 
	0xff9d, 0xfe9a, 0xb9e9, 0xb969, 0xb24c, 0xbb52, 0xc396, 0x9273, 0x492f, 0x3970, 0x31f1, 0x196e, 0x6b95, 0xd6df, 0xad9a, 0xf7df, 
	0xf7ff, 0xffff, 0xffde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7ff, 0xffff, 0xffff, 0xfffe, 0xffdd, 0xef5b, 0xb5f7, 0xc6bd, 
	0x6c36, 0x2a31, 0x3232, 0x3a33, 0x290e, 0x518e, 0xa331, 0xc371, 0xd351, 0xbb0f, 0xff1e, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffdf, 
	0xff9f, 0xffdf, 0xf79f, 0xff5e, 0xcbd2, 0xc351, 0xabb4, 0x82f3, 0x514f, 0x4130, 0x41d3, 0x2971, 0x3251, 0x7cb9, 0xc6bf, 0xadba, 
	0xf7bf, 0xf7df, 0xffff, 0xffff, 0xff9d, 0xfffe, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfffe, 0xfffd, 0xfffd, 0xfffd, 
	0xef9d, 0xc67b, 0xae1c, 0x959b, 0x3292, 0x1990, 0x29b1, 0x31b0, 0x394c, 0x59ee, 0x7a50, 0x8af2, 0xbd1a, 0xce3e, 0xdedf, 0xdedf, 
	0xd6ff, 0xe75f, 0xdebf, 0xe6ff, 0xc67f, 0xad5b, 0x7b32, 0x620f, 0x520f, 0x39af, 0x4191, 0x3151, 0x2990, 0x5335, 0x8d5b, 0xb65d, 
	0xbe5c, 0xef7f, 0xffff, 0xffff, 0xffff, 0xf7be, 0xfffe, 0xfffe, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xf7fe, 0xf7fd, 0xf7fc, 
	0xffdd, 0xffdd, 0xffff, 0xf7df, 0xcedd, 0xb65c, 0xae3e, 0x84da, 0x4273, 0x2990, 0x31d0, 0x318e, 0x310d, 0x49af, 0x316d, 0x39ae, 
	0x4a31, 0x5292, 0x5334, 0x5375, 0x4232, 0x41f1, 0x31d0, 0x296e, 0x39cf, 0x318f, 0x296f, 0x318f, 0x294f, 0x4a72, 0x94fb, 0xae1d, 
	0xae3b, 0xc6bc, 0xe75e, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffbf, 0xffdf, 0xffff, 0xf7ff, 
	0xf7fe, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xff5e, 0xffbf, 0xef7f, 0xc67c, 0xbe1c, 0xbdbd, 0x8c39, 0x4a73, 0x3a12, 0x316f, 0x49f1, 
	0x318f, 0x292d, 0x316e, 0x31af, 0x09ae, 0x1a10, 0x31b0, 0x41b1, 0x3971, 0x3150, 0x3190, 0x31d1, 0x4212, 0x5ad4, 0x9458, 0xbd9b, 
	0xbe1b, 0xc6bb, 0xe79e, 0xffff, 0xffff, 0xffbe, 0xffde, 0xffff, 0xefbd, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffdf, 
	0xffff, 0xf7ff, 0xf7ff, 0xffff, 0xffff, 0xffbf, 0xff9f, 0xffdf, 0xffdf, 0xff9e, 0xffdf, 0xdebc, 0xcdfb, 0xcdfd, 0xc61f, 0xad9f, 
	0x73b7, 0x5ad3, 0x4230, 0x39ce, 0x39af, 0x298e, 0x1a2f, 0x1a0f, 0x29af, 0x396f, 0x312e, 0x5232, 0x5af4, 0x8439, 0xb57d, 0xc5fe, 
	0xcdfc, 0xce1b, 0xe71d, 0xf7be, 0xf7de, 0xffff, 0xffbe, 0xffbf, 0xffff, 0xfffe, 0xffff, 0xf7ff, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffdf, 0xffff, 0xffff, 0xf7be, 0xffff, 0xffff, 0xffff, 0xff9f, 0xffbf, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffbf, 0xef3f, 
	0xce5c, 0xbe1c, 0xb59a, 0xce7e, 0xc63d, 0xad7a, 0xb57b, 0x8c56, 0x8496, 0x8cd8, 0x8c57, 0xa4fa, 0xb59b, 0xce3e, 0xbddc, 0xbe1c, 
	0xc61b, 0xce1a, 0xef3f, 0xf77f, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffbf, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffdf, 0xffff, 
	0xffff, 0xffdf, 0xffdf, 0xf79f, 0xffff, 0xffff, 0xffff, 0xef5d, 0xffbe, 0xffff, 0xffff, 0xffdf, 0xffbf, 0xffff, 0xffff, 0xfffe, 
	0xffff, 0xffff, 0xffff, 0xf7bf, 0xe71d, 0xd6bc, 0xc61a, 0xbdfa, 0xce5c, 0xc63c, 0xbdda, 0xc63b, 0xc61b, 0xc61c, 0xb5b9, 0xc63a, 
	0xd69c, 0xe73e, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffdf, 0xffff, 0xffff, 0xffdf
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 2528)
const int logoallArray_LEN = 1;
const uint16_t* logoallArray[1] = {
	logo_ute
};
static const uint8_t temperature[] = {
  0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x4c, 0x80, 0x00, 0x48, 0xc0, 0x18, 0x0a, 0x70, 0x09, 
  0xfa, 0x70, 0x03, 0x1a, 0x40, 0x06, 0x0a, 0x70, 0x04, 0x0a, 0xc0, 0x0c, 0x0a, 0x70, 0xec, 0x0a, 
  0xc0, 0x04, 0x0a, 0x40, 0x04, 0x13, 0x60, 0x02, 0x17, 0xa0, 0x01, 0xf7, 0x20, 0x08, 0x5a, 0x60, 
  0x18, 0x0c, 0xc0, 0x00, 0x47, 0x80, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00
};
static const uint8_t humidity[] = {
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0xd0, 0x00, 0x01, 0x98, 0x00, 0x03, 
  0x0c, 0x00, 0x06, 0x06, 0x00, 0x04, 0x03, 0x00, 0x08, 0x01, 0x00, 0x18, 0x01, 0x80, 0x10, 0x00, 
  0x80, 0x10, 0x00, 0xc0, 0x14, 0x00, 0xc0, 0x14, 0x00, 0xc0, 0x16, 0x00, 0x80, 0x1b, 0x00, 0x80, 
  0x09, 0xf1, 0x00, 0x0c, 0xf3, 0x00, 0x07, 0x0e, 0x00, 0x01, 0xf8, 0x00
};
// 'pressure', 20x20px
const unsigned char pressure [] PROGMEM = {
	0x03, 0xfc, 0x00, 0x07, 0xfe, 0x00, 0x1f, 0x0f, 0x80, 0x3c, 0x03, 0xc0, 0x30, 0x01, 0xc0, 0x70, 
	0x60, 0xe0, 0xe0, 0x60, 0x60, 0xe0, 0x60, 0x70, 0xc0, 0x60, 0x30, 0xc0, 0x60, 0x30, 0xc0, 0x60, 
	0x30, 0xc0, 0x38, 0x30, 0xe0, 0x1e, 0x70, 0xe0, 0x06, 0x70, 0x70, 0x00, 0xe0, 0x70, 0x00, 0xe0, 
	0x3c, 0x03, 0xc0, 0x1f, 0x0f, 0x80, 0x07, 0xfe, 0x00, 0x03, 0xfc, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 80)
const int pressureallArray_LEN = 1;
const unsigned char* pressureallArray[1] = {
	pressure
};
const static unsigned char icondo[]= {
  0x00, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x33, 0x00, 0x33, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char rain [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x1c, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 
  0x01, 0xf0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x30, 0x0e, 
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 
  0x0c, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x08, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0c, 
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0xfc, 0x83, 0xb1, 0x3f, 0xf0, 0x00, 0x00, 
  0x00, 0x85, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
  0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x31, 0x88, 0x00, 0x00, 0x00, 0x00, 0x18, 0x63, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char cloudy [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 
  0x07, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x03, 0x80, 0x00, 0x00, 0x00, 0x10, 0x60, 0x00, 0x80, 
  0x00, 0x00, 0x00, 0x30, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x60, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0xc0, 0x80, 0x07, 0xf8, 0x00, 0x00, 0x01, 0x81, 
  0x80, 0x0e, 0x0c, 0x00, 0x00, 0x03, 0x03, 0x80, 0x0c, 0x06, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 
  0x02, 0x00, 0x00, 0x06, 0x0c, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x03, 0x00, 
  0x00, 0x04, 0x18, 0x00, 0x00, 0x03, 0x80, 0x00, 0x06, 0x10, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x90, 0x00, 
  0x00, 0x00, 0x20, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
  0x20, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00 
};
const unsigned char lighting [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x30, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 
  0x07, 0xf0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x1c, 0x3c, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x30, 0x06, 
  0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x08, 0x00, 
  0x00, 0x00, 0x00, 0xe0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x1f, 
  0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x1f, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x1b, 0x00, 0x18, 
  0x00, 0x0c, 0x00, 0x00, 0x32, 0x00, 0x18, 0x00, 0x0e, 0x00, 0x00, 0x27, 0x00, 0x18, 0x00, 0x07, 
  0x80, 0x3e, 0x67, 0x00, 0x38, 0x00, 0x01, 0xfe, 0x66, 0xfb, 0x7f, 0xe0, 0x00, 0x00, 0x3e, 0xcc, 
  0xfb, 0x3f, 0x80, 0x00, 0x00, 0x00, 0xce, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x01, 0x82, 0x1e, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x96, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf6, 0x1c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};
const unsigned char lighting_rain [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0xe0, 0x00, 
  0x00, 0x00, 0x03, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
  0x06, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3c, 0x00, 
  0x00, 0x18, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 
  0xf0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x0c, 0x00, 0x0f, 0xfc, 0x00, 0x1c, 0x00, 
  0x08, 0x00, 0x18, 0x18, 0x00, 0x0c, 0x00, 0x18, 0x00, 0x18, 0x30, 0x00, 0x0c, 0x00, 0x18, 0x00, 
  0x38, 0x70, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x30, 0xc0, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x30, 0xff, 
  0x00, 0x1c, 0x00, 0x06, 0x00, 0x60, 0x06, 0x00, 0x38, 0x00, 0x03, 0xc0, 0x60, 0x0c, 0x00, 0xf0, 
  0x00, 0x01, 0xff, 0x7c, 0x19, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0x04, 0x37, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x69, 
  0x87, 0x18, 0x00, 0x00, 0x00, 0x38, 0xcb, 0x0e, 0x30, 0x00, 0x00, 0x00, 0x31, 0x9e, 0x18, 0x60, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0x8c, 0x41, 0xc7, 0x00, 0x00, 0x00, 0x07, 0x18, 0xe3, 0x8e, 0x00, 0x00, 0x00, 0x0c, 0x31, 
  0x87, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};
const unsigned char night [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x06, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x06, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x0e, 0x00, 
  0x00, 0x03, 0x00, 0x07, 0xe0, 0x1c, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x1c, 0x00, 0x00, 0x00, 
  0xff, 0xfe, 0x00, 0x38, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x78, 0x00, 0x00, 0x00, 0xf0, 0x00, 
  0x00, 0xf0, 0x00, 0x00, 0x00, 0x38, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x07, 0xc0, 
  0x00, 0x00, 0x00, 0x3f, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char clear_sky [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x03, 0xc0, 0x1c, 0x00, 
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
  0x3e, 0x0f, 0xf0, 0x78, 0x00, 0x00, 0x00, 0x0c, 0x3f, 0xfc, 0x70, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x3f, 0x80, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 
  0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x07, 0xc7, 0xc0, 0x03, 0xc3, 0xe0, 0x00, 0x0f, 0xc7, 
  0xc0, 0x03, 0xe7, 0xe0, 0x00, 0x07, 0xc7, 0xc0, 0x03, 0xe3, 0xe0, 0x00, 0x03, 0xc7, 0xc0, 0x03, 
  0xc3, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x07, 0xc0, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x3f, 0xfc, 0x30, 0x00, 0x00, 0x00, 0x1e, 0x1f, 
  0xf8, 0x78, 0x00, 0x00, 0x00, 0x3e, 0x03, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 
  0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};
 
const unsigned char clear_cloudy [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x18, 0x00, 
  0x00, 0x00, 0x00, 0x60, 0xc0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x30, 0x60, 0x00, 0x00, 
  0x00, 0x78, 0x3f, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x38, 0x7f, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x18, 
  0xe0, 0xe3, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x73, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x38, 
  0x00, 0x00, 0x00, 0x01, 0xf0, 0x78, 0x18, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x3c, 0x18, 0x00, 0x00, 
  0x00, 0x03, 0x80, 0x0e, 0x18, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x07, 0x98, 0xf0, 0x00, 0x00, 0x0e, 
  0x00, 0x03, 0xfc, 0xf0, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x18, 0x00, 0x01, 
  0xcf, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0xc0, 0x00, 0x00, 0x30, 0x00, 0x02, 0x00, 0xe0, 
  0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x03, 
  0xf0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x0e, 0x00, 0x00, 
  0x00, 0x00, 0x30, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
  0x30, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x06, 0x00, 
  0x00, 0x00, 0x03, 0x80, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char night_cloud [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x61, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x81, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x81, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x01, 0x81, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc1, 0x80, 0x00, 0x00, 
  0x00, 0x0c, 0x00, 0x60, 0xc0, 0x40, 0x00, 0x00, 0x18, 0x00, 0x30, 0x71, 0xc0, 0x00, 0x00, 0x18, 
  0x00, 0x3f, 0xbf, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x19, 0xc1, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 
  0x63, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x3c, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x02, 
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 
  0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 
  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xe0, 
  0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};
// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");
//Week Days
String weekDays[7]={"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
int gio, phut, giay, thu, ngay, thang, nam;
SimpleTimer timer_updateTime;
//-----------------------Phan khai bao cho Thoi tiet----------------------------------------------
//--------------Thoi tiet--------------
// 🌐 Cấu hình API OpenWeatherMap
String apiKey = "9e8d639aa101fa84fdf7915e45b6b5ae";  // 🔑 API Key của bạn
String city = "Ho Chi Minh";                         // 🏙️ Thành phố cần lấy dữ liệu

// 🌡️ Biến lưu dữ liệu thời tiết
float nhiet_do, ap_suat ;
int do_am, thoitiet;

// 🌍 Không cần lat, lon, hay server[] nữa
HTTPClient http;
//===================================================================
// ======== Biến toàn cục ========
// ====== Biến cho dữ liệu thời tiết từ API ======
String weather_text = "";
String weather_icon = "";
int weather_code = 0;

unsigned long previousMillis = 0;
const long interval = 1000; // 1 giây

// ====== Wi-Fi credentials ======
const char* ssid = "ESP32";       //sửa theo wifi lúc đó    asusvivobook     Timmie's S21 FE
const char* password = "12345678";               //                         45456789        @18022005

// ====== MQTT Broker details ======
const char* mqttServer = "10.0.145.129"; // IP broker theo lúc đó   10.0.26.216     10.95.221.206
const int mqttPort = 1883;
const char* mqttUser = ""; 
const char* mqttPassword = ""; 
const char* clientId = "ESP32_CLIENT";

// ====== MQTT Topics ======
const char* dataTopic = "home/sensor/data";   // publish DHT + BMP
const char* commandTopic = "iot/house/commands"; // sub nhận lệnh

bool lcdSleeping = false;

// ====== DHT11 Sensor ======
#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// ====== BMP180/BMP085 Sensor ======
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);

// ====== WiFi + MQTT client ======
WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  delay(5000);
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✅ Connected to WiFi!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n⚠️ WiFi not connected. Running offline mode.");
  }
}

void reconnect() {
  static unsigned long lastReconnectAttempt = 0;

  if (client.connected()) {
    // Nếu trước đó chưa vẽ trạng thái OK, thì vẽ ngay
    // (Điều này chỉ xảy ra một lần ngay sau khi kết nối thành công)
    if (lastReconnectAttempt != 0) {
      drawMQTTStatus();
      lastReconnectAttempt = 0; // Reset lại để biết là đang ổn định
    }
    return;
  }
  
  unsigned long now = millis();
  
  // Điều kiện mới: Thử kết nối nếu đây là lần đầu hoặc đã qua 30 giây
  if (lastReconnectAttempt == 0 || now - lastReconnectAttempt > 30000) {
    
    if (lastReconnectAttempt != 0) {
      Serial.println("MQTT connection lost. Reconnecting...");
    }
    
    lastReconnectAttempt = now;
    Serial.print("Attempting MQTT connection... ");

    if (client.connect(clientId, mqttUser, mqttPassword)) {
      Serial.println("✅ success");
      client.subscribe(commandTopic);
    } else {
      Serial.print("❌ failed, rc=");
      Serial.print(client.state());
      Serial.println(" | Retrying in 30 seconds...");
    }
    
    // Luôn vẽ trạng thái mới sau mỗi lần thử
    drawMQTTStatus();
  }
}


////////////// Tắt màn hình LCD//////////
void lcdSleep() {
  if (lcdSleeping) return; // đã sleep rồi
  lcdSleeping = true;

  // Tô đen toàn màn hình (double clear để chắc chắn)
  tft.fillScreen(BLACK);
  delay(40);
  tft.fillScreen(BLACK);
  delay(20);

  // Gửi lệnh vào chế độ sleep (vẫn giữ kết nối WiFi/MQTT)
  tft.writeCommand(ST77XX_DISPOFF);
  tft.writeCommand(ST77XX_SLPIN);

  Serial.println("🛌 LCD OFF (sleep) - blacked out");
}
////////////// Bật màn hình LCD//////////
void lcdWake() {
  if (!lcdSleeping) return; // đã wake rồi

  // Gửi lệnh vào chế độ sleep (vẫn giữ kết nối WiFi/MQTT)
  // tft.writeCommand(ST77XX_DISPOFF); // Bạn có thể bỏ qua các lệnh này nếu
  // tft.writeCommand(ST77XX_SLPIN);   // thực sự chỉ tô đen màn hình

  lcdSleeping = false; // Bật cờ trước khi vẽ

  // Vẽ lại toàn bộ giao diện tĩnh
  setupLCD();
  
  // Cập nhật lại những thứ không cần mạng
  updateSensorData(); 
  
  // Vẽ lại icon thời tiết với dữ liệu đã có
  tft.fillRect(78, 99, 50, 40, BLACK);
  iconthoitiet(78, 99, weather_code);

  // Cập nhật trạng thái MQTT
  drawMQTTStatus();

  Serial.println("🌞 LCD ON (wake) - UI restored");
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(" | Message: ");
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);

  if (String(topic) == commandTopic) {
    // ================= LCD Commands =================
    if (message == "OPEN") {
      Serial.println("👉 Command: OPEN LCD");
      lcdWake();
      client.publish("iot/house/status", "LCD OPENED");
      return;
    } 
    if (message == "SLEEP") {
      Serial.println("👉 Command: SLEEP LCD");
      lcdSleep();
      client.publish("iot/house/status", "LCD SLEPT");
      return;
    }

    // ================= City Change Command =================
    // Nếu message là JSON, ví dụ {"cmd":"change_city","city":"Da Nang"}
    DynamicJsonDocument doc(256);
    DeserializationError error = deserializeJson(doc, message);
    if (!error) {
      String cmd = doc["cmd"];
      if (cmd == "change_city") {
        String newCity = doc["city"].as<String>();
        if (newCity.length() > 0) {
          city = newCity;
          Serial.println("🌍 Nhận lệnh đổi vị trí sang: " + city);

          // Cập nhật ngay dữ liệu thời tiết
          getWeather();

          // Gửi phản hồi về server để biết đã đổi
          client.publish("iot/house/status", ("CITY_CHANGED:" + city).c_str());
        }
      }
    } else {
      Serial.println("⚠️ Lệnh không phải JSON hoặc lỗi parse!");
    }
  }
}



//==================================================================================== MAIN ===================================================================================================================================================
bool check_wifi = 0;
// Trạng thái màn hình (true = đang sleep / blacked-out)
void drawMQTTStatus() {
  if (lcdSleeping) return;
  // Vùng status tương ứng với layout hiện tại
  const int x = 96, y = 42, w = 30, h = 10;
  // Xóa vùng trước khi in
  tft.fillRect(x, y, w, h, BLACK);
  tft.setCursor(x, y);
  tft.setTextSize(1);

  if (client.connected()) {
    tft.setTextColor(GREEN, BLACK);
    tft.print("OK");
  } else {
    tft.setTextColor(RED, BLACK);
    tft.print("LOST");
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println("=== Bắt đầu khởi động hệ thống ===");
  // Khởi tạo I2C trên ESP32-C6 (SDA=11, SCL=12)
  Wire.begin(11, 12);

  // Khởi động DHT11
  dht.begin();
  
  // Khởi động BMP180
  if (!bmp.begin()) {
    Serial.println("❌ Could not find a valid BMP085/BMP180 sensor, check_wifi wiring!");
    while (1);
  }

  setup_wifi();
  client.setServer(mqttServer, mqttPort);
  client.setBufferSize(512);            // giúp tránh nghẽn khi gói JSON dài hơn mặc định 128 byte
  client.setCallback(callback);
  client.subscribe(commandTopic);
  tft.initR(INITR_BLACKTAB);//Thiet lap LCD TFT
  tft.setSPISpeed(27000000); // 27 MHz
  setupLCD();                                     //Thiet lap Hien thi LCD
  drawMQTTStatus();
  timeClient.begin();                             //Khoi chay lay thoi gian tu NTP
  timeClient.setTimeOffset(25200);    //Cai dat mui gio GMT+7

  if(WiFi.status() == WL_CONNECTED){    // chỉ hiện thời gian và API khi có kết nối wifi
    check_wifi = 1;
    getThoigian();                                  //Lay thoi gian tren NTP  
    updateTimeLCD();
    getWeather();
  }
  updateSensorData();
  
}

unsigned long previousPublish = 0;
unsigned long previousSensor = 0;
unsigned long previousWeatherUpdate = 0; // << Thêm dòng này
/////////////////////////////////////////////////////////////////////////////
void loop() {
  // ===== 1. Xử lý kết nối WiFi & MQTT =====
  if (WiFi.status() == WL_CONNECTED) {
    if (check_wifi == 0) { // Nếu trước đó không có mạng, bây giờ đã có
      check_wifi = 1;
      Serial.println("WiFi reconnected. Initializing network services...");
      ESP.restart();   // 🔄 Reset ESP32
    }
    reconnect(); // Xử lý MQTT tự động
  } else {
    if (check_wifi == 1) { // Nếu trước đó có mạng, bây giờ bị mất
      check_wifi = 0;
      Serial.println("WiFi connection lost.");
      drawMQTTStatus(); // Hiển thị trạng thái mất mạng
    }
  }

  // ===== 2. Xử lý các gói tin MQTT đến và đi =====
  client.loop();

  unsigned long currentMillis = millis();

  // ===== 3. Cập nhật thời gian mỗi 1s =====
  if (currentMillis - previousMillis >= 1000 && check_wifi == 1) {
    previousMillis = currentMillis;
    timeClient.update();
    getThoigian();
    updateTimeLCD();
  }

  // ===== 4. Đọc cảm biến mỗi 0.5s =====
  if (currentMillis - previousSensor >= 500) {
    previousSensor = currentMillis;
    updateSensorData();
  }

  // ===== 5. Publish MQTT mỗi 0.5s =====
  if (client.connected() && (currentMillis - previousPublish >= 500)) {
    previousPublish = currentMillis;

    StaticJsonDocument<256> doc;
    doc["temperature_dht"] = nhiet_do;
    doc["humidity"] = do_am;
    doc["pressure"] = ap_suat;
    doc["weather_code"] = weather_code;

    // === Thêm timestamp Epoch để Influx ghi đúng thời điểm thực ===
    doc["timestamp"] = timeClient.getEpochTime();

    String jsonString;
    serializeJson(doc, jsonString);

    // Gửi MQTT
    client.publish(dataTopic, jsonString.c_str());
    Serial.print("✅ Published data: ");
    Serial.println(jsonString);
  }

  // ===== 6. Cập nhật dữ liệu thời tiết API mỗi 30 phút =====
  if (currentMillis - previousWeatherUpdate >= 1800000UL && WiFi.status() == WL_CONNECTED) {
    previousWeatherUpdate = currentMillis;
    getWeather();
  }
}



//=====================Phan chuong trinh con===============================
void updateSensorData() {
  if (lcdSleeping) return; // nếu đang sleep thì không vẽ
  float hum11 = dht.readHumidity();
  float temp11 = dht.readTemperature();
  sensors_event_t event;
  bmp.getEvent(&event);


  float apsuat = event.pressure ? event.pressure : 0;
  if (isnan(hum11) || isnan(temp11)) {
    Serial.println("⚠️ Lỗi đọc cảm biến DHT11!");
    return;
  }

  nhiet_do = (int)temp11;
  do_am = (int)hum11;
  ap_suat = (int)apsuat;
  Serial.printf("🌡 Nhiệt độ: %.1f°C | 💧 Độ ẩm: %.1f%%\n", temp11, hum11);

  // === Hiển thị lên TFT ===
  tft.setCursor(35, 94);
  tft.setTextColor(YELLOW, BLACK);
  tft.setTextSize(2);
  tft.print((int)nhiet_do);
  tft.drawBitmap(57, 94, icondo, 10, 20, YELLOW);
  tft.setCursor(68, 94);
  tft.print("C");

  tft.setCursor(35, 118);
  tft.setTextColor(GREEN, BLACK);
  tft.setTextSize(2);
  tft.print(String(do_am) + "%");

  tft.setCursor(35, 140);
  tft.setTextColor(GREEN, BLACK);
  tft.setTextSize(2);
  tft.print((int)ap_suat);
}

void setupLCD(){
  tft.fillScreen(BLACK);                          //Thiet lap mau nen LCD
  tft.drawRGBBitmap(2, 2, logo_ute, 50, 50);
  printText("WEATHER",CYAN,60,5,1);         //Hien thi thong tin kenh
  printText("STATION",CYAN,60,17,1);
  printText("NHOM 9",YELLOW,60,30,1);
  printText("MQTT: ",GREEN,60,42,1);
  tft.drawRect(0,65,128,25,MAGENTA);              //Hien thi khung thoi gian
  tft.drawBitmap(10,92,temperature,20,20,CYAN);  //Hien thi icon nhiet do va do am
  tft.drawBitmap(10,114,humidity,20,20,CYAN);
  tft.drawBitmap(10,136,pressure,20,20,CYAN);
}
void getThoigian(){
  gio  = timeClient.getHours();
  phut = timeClient.getMinutes();
  giay = timeClient.getSeconds();
  Serial.println();
  Serial.printf("%02d:%02d:%02d",gio,phut,giay);
  thu  = timeClient.getDay();
  unsigned long epochTime = timeClient.getEpochTime();
  struct tm *ptm = gmtime ((time_t *)&epochTime); 
  ngay  = ptm->tm_mday;
  thang = ptm->tm_mon+1;     //1-->11;
  nam   = ptm->tm_year+1900;
  Serial.println();
  Serial.printf("Thu %0d Ngay %02d Thang %02d Nam %d",thu, ngay, thang, nam);
}

void updateTimeLCD(){ 
  if (lcdSleeping) return; // nếu đang sleep thì không vẽ
  if (nam < 2024 || nam > 4000) return;
  //Hien thi thu trong tuan
  tft.setCursor(5, 55);
  tft.setTextColor(YELLOW,BLACK);
  tft.setTextSize(1);
  String weekDay = weekDays[thu];
  tft.print(weekDay);
  
  //Print complete date:
  tft.setCursor(65, 55);
  tft.setTextColor(CYAN,BLACK);
  tft.setTextSize(1);
  String ngay_,thang_;
  if(ngay<10){
    ngay_= "0" + String(ngay);
  }else{
    ngay_=String(ngay);
  }
  if(thang<10){
    thang_= "0" + String(thang);
  }else{
    thang_=String(thang);
  }
  String currentDate = ngay_ + "-" + thang_ + "-" + String(nam);
  tft.println(currentDate);
  // Hiển thị thời gian
  tft.setCursor(15, 70);
  tft.setTextColor(WHITE,BLACK);
  tft.setTextSize(2);
  String gio_,phut_,giay_;
  if(gio<10){
    gio_= "0" + String(gio);
  }else{
    gio_=String(gio);
  }
  if(phut<10){
    phut_= "0" + String(phut);
  }else{
    phut_=String(phut);
  }
  if(giay<10){
    giay_= "0" + String(giay);
  }else{
    giay_=String(giay);
  }
  String formattedTime = gio_ + ":" + phut_ + ":" + giay_;
  tft.print(formattedTime);
  
}

void getWeather() {
  String cityEncoded = city;
  cityEncoded.replace(" ", "%20");

  WiFiClientSecure client;
  client.setInsecure();

  HTTPClient http;
  String url = "https://api.openweathermap.org/data/2.5/weather?q=" + cityEncoded +
               "&appid=" + apiKey + "&units=metric";

  Serial.println("[HTTP] Đang truy cập API:");
  Serial.println(url);

  http.begin(client, url);
  http.addHeader("User-Agent", "ESP32C6-WeatherClient");
  http.addHeader("Content-Type", "application/json");

  int httpCode = http.GET();
  if (httpCode > 0) {
    if (httpCode == HTTP_CODE_OK) {
      String data = http.getString();
      DynamicJsonDocument doc(2048);
      DeserializationError error = deserializeJson(doc, data);
      if (error) {
        Serial.print("❌ JSON parse error: ");
        Serial.println(error.f_str());
        return;
      }

      // ✅ Lưu các thông tin từ API
      weather_code = doc["weather"][0]["id"].as<int>();
      weather_text = doc["weather"][0]["main"].as<String>();
      weather_icon = doc["weather"][0]["icon"].as<String>();

      Serial.printf("☁️ Code: %d | Text: %s | Icon: %s\n",
                    weather_code, weather_text.c_str(), weather_icon.c_str());
      // Cập nhật hiển thị icon (chỉ khi không sleep)
      if (!lcdSleeping) {
        tft.fillRect(78, 99, 50, 40, BLACK);
        iconthoitiet(78, 99, weather_code);
      }

      // Cập nhật hiển thị icon
      //tft.fillRect(78, 99, 50, 40, BLACK);
      //iconthoitiet(78, 99, weather_code);
    }
  } else {
    Serial.printf("❌ HTTP GET thất bại: %s\n", http.errorToString(httpCode).c_str());
  }
  http.end();
}



void iconthoitiet(int x, int y,int code) {     
  switch(code) {
    // Mua kem sam set
    case 200:
    case 201:
    case 202:
    case 211:
              tft.drawBitmap(x,y,lighting_rain,50,40,WHITE);
              break;
    // Sam set
    case 230:
    case 231:
    case 232:
    case 233:
              tft.drawBitmap(x,y,lighting,50,40,WHITE);
              break;
    // May + mua
    case 300:
    case 301:
    case 302:
    case 500:
    case 501:
    case 502:
    case 511:
    case 520:
    case 521:
    case 522:
    case 623:
              tft.drawBitmap(x,y,rain,50,40,WHITE);
              break;
    // Clear Sky
    case 800:
              if(gio <18 && gio>5)
                tft.drawBitmap(x,y,clear_sky,50,40,WHITE);
              else
                tft.drawBitmap(x,y,night,50,40,WHITE);  
              break;
    case 700:
    case 711:
    case 721:
    case 731:
    case 741:
    case 751:
    case 801:
    case 802:
    case 803:
              if(gio <18 && gio>5)
                tft.drawBitmap(x,y,clear_cloudy,50,40,WHITE);
              else
                tft.drawBitmap(x,y,night_cloud,50,40,WHITE);
              break;
    // Trời nhiều mây
    case 611:
    case 612:
    case 804:
              tft.drawBitmap(x,y,cloudy,50,40,WHITE);
              break;
  }
}
void printText(char *text, uint16_t color, int x, int y,int textSize ){
  tft.setCursor(x, y);
  tft.setTextColor(color);
  tft.setTextSize(textSize);
  tft.print(text);
}

